{"/Users/michellenguyen/project_team153/src/controller/IInsightFacade.ts":{"path":"/Users/michellenguyen/project_team153/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":24,"6":24,"7":1,"8":5,"9":5,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":24,"2":5,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/michellenguyen/project_team153/src/controller/IInsightFacade.ts","sources":["/Users/michellenguyen/project_team153/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"565bd6e68d49b30d5d9f82ba16e5b7da0cc51bab","contentHash":"2f59e4ca65fa7fe26cbd4c38af503d75dee6c413a7ed2bf5350a0d37b3c9fa34"},"/Users/michellenguyen/project_team153/src/controller/InsightFacade.ts":{"path":"/Users/michellenguyen/project_team153/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":16},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":47}},"6":{"start":{"line":9,"column":25},"end":{"line":9,"column":52}},"7":{"start":{"line":10,"column":18},"end":{"line":10,"column":38}},"8":{"start":{"line":11,"column":21},"end":{"line":11,"column":60}},"9":{"start":{"line":12,"column":25},"end":{"line":12,"column":66}},"10":{"start":{"line":17,"column":8},"end":{"line":17,"column":34}},"11":{"start":{"line":18,"column":8},"end":{"line":18,"column":37}},"12":{"start":{"line":21,"column":8},"end":{"line":47,"column":11}},"13":{"start":{"line":22,"column":12},"end":{"line":46,"column":13}},"14":{"start":{"line":23,"column":16},"end":{"line":25,"column":17}},"15":{"start":{"line":24,"column":20},"end":{"line":24,"column":135}},"16":{"start":{"line":26,"column":16},"end":{"line":28,"column":17}},"17":{"start":{"line":27,"column":20},"end":{"line":27,"column":103}},"18":{"start":{"line":29,"column":43},"end":{"line":29,"column":83}},"19":{"start":{"line":30,"column":16},"end":{"line":42,"column":19}},"20":{"start":{"line":31,"column":49},"end":{"line":31,"column":93}},"21":{"start":{"line":32,"column":20},"end":{"line":41,"column":23}},"22":{"start":{"line":33,"column":24},"end":{"line":35,"column":25}},"23":{"start":{"line":34,"column":28},"end":{"line":34,"column":133}},"24":{"start":{"line":36,"column":24},"end":{"line":40,"column":27}},"25":{"start":{"line":37,"column":28},"end":{"line":37,"column":58}},"26":{"start":{"line":38,"column":28},"end":{"line":38,"column":68}},"27":{"start":{"line":39,"column":28},"end":{"line":39,"column":58}},"28":{"start":{"line":45,"column":16},"end":{"line":45,"column":109}},"29":{"start":{"line":50,"column":8},"end":{"line":57,"column":9}},"30":{"start":{"line":51,"column":12},"end":{"line":51,"column":82}},"31":{"start":{"line":52,"column":29},"end":{"line":52,"column":80}},"32":{"start":{"line":53,"column":12},"end":{"line":53,"column":92}},"33":{"start":{"line":56,"column":12},"end":{"line":56,"column":106}},"34":{"start":{"line":60,"column":30},"end":{"line":60,"column":32}},"35":{"start":{"line":61,"column":25},"end":{"line":85,"column":10}},"36":{"start":{"line":62,"column":12},"end":{"line":84,"column":15}},"37":{"start":{"line":63,"column":16},"end":{"line":83,"column":17}},"38":{"start":{"line":64,"column":39},"end":{"line":64,"column":65}},"39":{"start":{"line":65,"column":20},"end":{"line":79,"column":21}},"40":{"start":{"line":66,"column":24},"end":{"line":74,"column":25}},"41":{"start":{"line":67,"column":48},"end":{"line":67,"column":71}},"42":{"start":{"line":68,"column":28},"end":{"line":73,"column":29}},"43":{"start":{"line":69,"column":54},"end":{"line":69,"column":82}},"44":{"start":{"line":70,"column":32},"end":{"line":72,"column":33}},"45":{"start":{"line":71,"column":36},"end":{"line":71,"column":70}},"46":{"start":{"line":75,"column":24},"end":{"line":75,"column":34}},"47":{"start":{"line":78,"column":24},"end":{"line":78,"column":111}},"48":{"start":{"line":82,"column":20},"end":{"line":82,"column":95}},"49":{"start":{"line":86,"column":8},"end":{"line":91,"column":11}},"50":{"start":{"line":87,"column":24},"end":{"line":87,"column":37}},"51":{"start":{"line":89,"column":12},"end":{"line":89,"column":26}},"52":{"start":{"line":90,"column":12},"end":{"line":90,"column":22}},"53":{"start":{"line":94,"column":18},"end":{"line":94,"column":39}},"54":{"start":{"line":95,"column":28},"end":{"line":95,"column":30}},"55":{"start":{"line":96,"column":8},"end":{"line":119,"column":11}},"56":{"start":{"line":97,"column":34},"end":{"line":97,"column":60}},"57":{"start":{"line":98,"column":12},"end":{"line":113,"column":13}},"58":{"start":{"line":99,"column":16},"end":{"line":109,"column":19}},"59":{"start":{"line":100,"column":20},"end":{"line":108,"column":21}},"60":{"start":{"line":101,"column":24},"end":{"line":104,"column":25}},"61":{"start":{"line":102,"column":45},"end":{"line":102,"column":74}},"62":{"start":{"line":103,"column":28},"end":{"line":103,"column":71}},"63":{"start":{"line":107,"column":24},"end":{"line":107,"column":110}},"64":{"start":{"line":112,"column":16},"end":{"line":112,"column":106}},"65":{"start":{"line":114,"column":12},"end":{"line":114,"column":44}},"66":{"start":{"line":117,"column":12},"end":{"line":117,"column":116}},"67":{"start":{"line":118,"column":12},"end":{"line":118,"column":22}},"68":{"start":{"line":122,"column":8},"end":{"line":137,"column":11}},"69":{"start":{"line":123,"column":12},"end":{"line":125,"column":13}},"70":{"start":{"line":124,"column":16},"end":{"line":124,"column":105}},"71":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"72":{"start":{"line":127,"column":16},"end":{"line":127,"column":111}},"73":{"start":{"line":129,"column":29},"end":{"line":129,"column":80}},"74":{"start":{"line":130,"column":12},"end":{"line":136,"column":15}},"75":{"start":{"line":131,"column":16},"end":{"line":131,"column":100}},"76":{"start":{"line":131,"column":82},"end":{"line":131,"column":98}},"77":{"start":{"line":132,"column":16},"end":{"line":132,"column":44}},"78":{"start":{"line":133,"column":16},"end":{"line":133,"column":28}},"79":{"start":{"line":135,"column":16},"end":{"line":135,"column":110}},"80":{"start":{"line":140,"column":8},"end":{"line":140,"column":50}},"81":{"start":{"line":143,"column":8},"end":{"line":159,"column":11}},"82":{"start":{"line":144,"column":31},"end":{"line":144,"column":33}},"83":{"start":{"line":145,"column":12},"end":{"line":156,"column":13}},"84":{"start":{"line":146,"column":32},"end":{"line":146,"column":57}},"85":{"start":{"line":147,"column":16},"end":{"line":154,"column":17}},"86":{"start":{"line":148,"column":47},"end":{"line":152,"column":21}},"87":{"start":{"line":153,"column":20},"end":{"line":153,"column":58}},"88":{"start":{"line":158,"column":12},"end":{"line":158,"column":34}},"89":{"start":{"line":162,"column":0},"end":{"line":162,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":18},"end":{"line":19,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":34},"end":{"line":48,"column":5}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":21,"column":27},"end":{"line":21,"column":28}},"loc":{"start":{"line":21,"column":48},"end":{"line":47,"column":9}},"line":21},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":40},"end":{"line":30,"column":41}},"loc":{"start":{"line":30,"column":57},"end":{"line":42,"column":17}},"line":30},"5":{"name":"(anonymous_5)","decl":{"start":{"line":32,"column":46},"end":{"line":32,"column":47}},"loc":{"start":{"line":32,"column":65},"end":{"line":41,"column":21}},"line":32},"6":{"name":"(anonymous_6)","decl":{"start":{"line":36,"column":72},"end":{"line":36,"column":73}},"loc":{"start":{"line":36,"column":79},"end":{"line":40,"column":25}},"line":36},"7":{"name":"(anonymous_7)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":43},"end":{"line":58,"column":5}},"line":49},"8":{"name":"(anonymous_8)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":48},"end":{"line":92,"column":5}},"line":59},"9":{"name":"(anonymous_9)","decl":{"start":{"line":61,"column":45},"end":{"line":61,"column":46}},"loc":{"start":{"line":61,"column":65},"end":{"line":85,"column":9}},"line":61},"10":{"name":"(anonymous_10)","decl":{"start":{"line":62,"column":31},"end":{"line":62,"column":32}},"loc":{"start":{"line":62,"column":44},"end":{"line":84,"column":13}},"line":62},"11":{"name":"(anonymous_11)","decl":{"start":{"line":87,"column":18},"end":{"line":87,"column":19}},"loc":{"start":{"line":87,"column":24},"end":{"line":87,"column":37}},"line":87},"12":{"name":"(anonymous_12)","decl":{"start":{"line":88,"column":19},"end":{"line":88,"column":20}},"loc":{"start":{"line":88,"column":30},"end":{"line":91,"column":9}},"line":88},"13":{"name":"(anonymous_13)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":40},"end":{"line":120,"column":5}},"line":93},"14":{"name":"(anonymous_14)","decl":{"start":{"line":96,"column":61},"end":{"line":96,"column":62}},"loc":{"start":{"line":96,"column":75},"end":{"line":115,"column":9}},"line":96},"15":{"name":"(anonymous_15)","decl":{"start":{"line":99,"column":57},"end":{"line":99,"column":58}},"loc":{"start":{"line":99,"column":71},"end":{"line":109,"column":17}},"line":99},"16":{"name":"(anonymous_16)","decl":{"start":{"line":116,"column":19},"end":{"line":116,"column":20}},"loc":{"start":{"line":116,"column":30},"end":{"line":119,"column":9}},"line":116},"17":{"name":"(anonymous_17)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":22},"end":{"line":138,"column":5}},"line":121},"18":{"name":"(anonymous_18)","decl":{"start":{"line":122,"column":27},"end":{"line":122,"column":28}},"loc":{"start":{"line":122,"column":48},"end":{"line":137,"column":9}},"line":122},"19":{"name":"(anonymous_19)","decl":{"start":{"line":130,"column":53},"end":{"line":130,"column":54}},"loc":{"start":{"line":130,"column":59},"end":{"line":134,"column":13}},"line":130},"20":{"name":"(anonymous_20)","decl":{"start":{"line":131,"column":67},"end":{"line":131,"column":68}},"loc":{"start":{"line":131,"column":82},"end":{"line":131,"column":98}},"line":131},"21":{"name":"(anonymous_21)","decl":{"start":{"line":134,"column":21},"end":{"line":134,"column":22}},"loc":{"start":{"line":134,"column":27},"end":{"line":136,"column":13}},"line":134},"22":{"name":"(anonymous_22)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":24},"end":{"line":141,"column":5}},"line":139},"23":{"name":"(anonymous_23)","decl":{"start":{"line":142,"column":4},"end":{"line":142,"column":5}},"loc":{"start":{"line":142,"column":19},"end":{"line":160,"column":5}},"line":142},"24":{"name":"(anonymous_24)","decl":{"start":{"line":143,"column":27},"end":{"line":143,"column":28}},"loc":{"start":{"line":143,"column":40},"end":{"line":159,"column":9}},"line":143}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":22,"column":12},"end":{"line":46,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":46,"column":13}},{"start":{"line":22,"column":12},"end":{"line":46,"column":13}}],"line":22},"4":{"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":37}},"type":"binary-expr","locations":[{"start":{"line":22,"column":16},"end":{"line":22,"column":18}},{"start":{"line":22,"column":22},"end":{"line":22,"column":29}},{"start":{"line":22,"column":33},"end":{"line":22,"column":37}}],"line":22},"5":{"loc":{"start":{"line":23,"column":16},"end":{"line":25,"column":17}},"type":"if","locations":[{"start":{"line":23,"column":16},"end":{"line":25,"column":17}},{"start":{"line":23,"column":16},"end":{"line":25,"column":17}}],"line":23},"6":{"loc":{"start":{"line":23,"column":20},"end":{"line":23,"column":86}},"type":"binary-expr","locations":[{"start":{"line":23,"column":20},"end":{"line":23,"column":29}},{"start":{"line":23,"column":33},"end":{"line":23,"column":49}},{"start":{"line":23,"column":53},"end":{"line":23,"column":86}}],"line":23},"7":{"loc":{"start":{"line":26,"column":16},"end":{"line":28,"column":17}},"type":"if","locations":[{"start":{"line":26,"column":16},"end":{"line":28,"column":17}},{"start":{"line":26,"column":16},"end":{"line":28,"column":17}}],"line":26},"8":{"loc":{"start":{"line":33,"column":24},"end":{"line":35,"column":25}},"type":"if","locations":[{"start":{"line":33,"column":24},"end":{"line":35,"column":25}},{"start":{"line":33,"column":24},"end":{"line":35,"column":25}}],"line":33},"9":{"loc":{"start":{"line":65,"column":20},"end":{"line":79,"column":21}},"type":"if","locations":[{"start":{"line":65,"column":20},"end":{"line":79,"column":21}},{"start":{"line":65,"column":20},"end":{"line":79,"column":21}}],"line":65},"10":{"loc":{"start":{"line":65,"column":24},"end":{"line":65,"column":77}},"type":"binary-expr","locations":[{"start":{"line":65,"column":24},"end":{"line":65,"column":41}},{"start":{"line":65,"column":45},"end":{"line":65,"column":77}}],"line":65},"11":{"loc":{"start":{"line":68,"column":28},"end":{"line":73,"column":29}},"type":"if","locations":[{"start":{"line":68,"column":28},"end":{"line":73,"column":29}},{"start":{"line":68,"column":28},"end":{"line":73,"column":29}}],"line":68},"12":{"loc":{"start":{"line":70,"column":32},"end":{"line":72,"column":33}},"type":"if","locations":[{"start":{"line":70,"column":32},"end":{"line":72,"column":33}},{"start":{"line":70,"column":32},"end":{"line":72,"column":33}}],"line":70},"13":{"loc":{"start":{"line":98,"column":12},"end":{"line":113,"column":13}},"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":113,"column":13}},{"start":{"line":98,"column":12},"end":{"line":113,"column":13}}],"line":98},"14":{"loc":{"start":{"line":98,"column":16},"end":{"line":98,"column":84}},"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":44}},{"start":{"line":98,"column":48},"end":{"line":98,"column":61}},{"start":{"line":98,"column":65},"end":{"line":98,"column":84}}],"line":98},"15":{"loc":{"start":{"line":101,"column":24},"end":{"line":104,"column":25}},"type":"if","locations":[{"start":{"line":101,"column":24},"end":{"line":104,"column":25}},{"start":{"line":101,"column":24},"end":{"line":104,"column":25}}],"line":101},"16":{"loc":{"start":{"line":123,"column":12},"end":{"line":125,"column":13}},"type":"if","locations":[{"start":{"line":123,"column":12},"end":{"line":125,"column":13}},{"start":{"line":123,"column":12},"end":{"line":125,"column":13}}],"line":123},"17":{"loc":{"start":{"line":123,"column":16},"end":{"line":123,"column":45}},"type":"binary-expr","locations":[{"start":{"line":123,"column":16},"end":{"line":123,"column":25}},{"start":{"line":123,"column":29},"end":{"line":123,"column":45}}],"line":123},"18":{"loc":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},{"start":{"line":126,"column":12},"end":{"line":128,"column":13}}],"line":126},"19":{"loc":{"start":{"line":147,"column":16},"end":{"line":154,"column":17}},"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":154,"column":17}},{"start":{"line":147,"column":16},"end":{"line":154,"column":17}}],"line":147}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":24,"11":24,"12":28,"13":28,"14":25,"15":3,"16":25,"17":1,"18":25,"19":25,"20":25,"21":25,"22":22,"23":1,"24":22,"25":22,"26":22,"27":22,"28":3,"29":22,"30":22,"31":22,"32":22,"33":2,"34":25,"35":25,"36":118896,"37":118896,"38":118896,"39":118885,"40":118885,"41":1292363,"42":1292363,"43":1292362,"44":1292362,"45":1292362,"46":118885,"47":0,"48":11,"49":25,"50":22,"51":0,"52":0,"53":25,"54":25,"55":25,"56":25,"57":25,"58":25,"59":118921,"60":118921,"61":118896,"62":118896,"63":0,"64":0,"65":25,"66":0,"67":0,"68":11,"69":11,"70":3,"71":11,"72":5,"73":11,"74":11,"75":11,"76":12,"77":11,"78":11,"79":0,"80":39,"81":5,"82":5,"83":5,"84":4,"85":4,"86":4,"87":4,"88":5,"89":1},"f":{"0":3,"1":24,"2":28,"3":28,"4":25,"5":22,"6":22,"7":22,"8":25,"9":118896,"10":118896,"11":22,"12":0,"13":25,"14":25,"15":118921,"16":0,"17":11,"18":11,"19":11,"20":12,"21":0,"22":39,"23":5,"24":5},"b":{"0":[1,1,1],"1":[0,3],"2":[3,3],"3":[25,3],"4":[28,27,25],"5":[3,22],"6":[25,25,23],"7":[1,24],"8":[1,21],"9":[118885,0],"10":[118885,118885],"11":[1292362,1],"12":[1292362,0],"13":[25,0],"14":[25,25,25],"15":[118896,25],"16":[3,8],"17":[11,10],"18":[5,6],"19":[4,0]},"inputSourceMap":{"version":3,"file":"/Users/michellenguyen/project_team153/src/controller/InsightFacade.ts","sources":["/Users/michellenguyen/project_team153/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError\n} from \"./IInsightFacade\";\nimport {Section} from \"./Section\";\nconst PROJECT_ROOT = path.join(__dirname, \"../..\");\nconst DATA_FOLDER_PATH = path.join(PROJECT_ROOT, \"data\");\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tpublic currentDatasets: string[];\n\tpublic datasetsMap: Map<string, InsightResult[]>;\n\n\tconstructor() {\n\t\tthis.currentDatasets = [];\n\t\tthis.datasetsMap = new Map<string, []>();\n\t}\n\n\tpublic addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\treturn new Promise<string[]>( (resolve, reject) => {\n\t\t\tif (id && content && kind) {\n\t\t\t\tif (id === \"\" || id.includes(\"_\") || this.currentDatasets.includes(id)) {\n\t\t\t\t\treject(new InsightError(\"Trying to add datatset with an invalid ID, or one with a duplicate ID\"));\n\t\t\t\t}\n\n\t\t\t\tif (kind === InsightDatasetKind.Rooms) {\n\t\t\t\t\treject(new InsightError(\"Trying to add dataset with Rooms kind\"));\n\t\t\t\t}\n\n\t\t\t\tconst courseFilesPromise = this.extractCourseFiles(content, reject);\n\t\t\t\tcourseFilesPromise.then((courseFiles) => {\n\t\t\t\t\tconst sectionsArrayPromise = this.processCourseFiles(courseFiles, reject);\n\t\t\t\t\tsectionsArrayPromise.then((sectionsArray) => {\n\t\t\t\t\t\tif (sectionsArray.length === 0) {\n\t\t\t\t\t\t\treject(new InsightError(\"Trying to add dataset with no valid sections in course file\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.saveToDisk(id, sectionsArray, reject).then((r) => {\n\t\t\t\t\t\t\tthis.currentDatasets.push(id);\n\t\t\t\t\t\t\tthis.datasetsMap.set(id, sectionsArray);\n\t\t\t\t\t\t\tresolve(this.currentDatasets);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(new InsightError(\"Trying to add a dataset with invalid parameters\"));\n\t\t\t}\n\t\t});\n\t}\n\n\t// Saves the desired InsightResult[] to disk\n\tprivate async saveToDisk(id: string, sections: InsightResult[], reject: (reason?: any) => void) {\n\t\ttry {\n\t\t\tawait fs.mkdir(DATA_FOLDER_PATH, {recursive: true});\n\n\t\t\tconst filePath = path.join(DATA_FOLDER_PATH, id + \".json\");\n\t\t\tawait fs.writeFile(filePath, JSON.stringify(sections, null, 2));\n\t\t} catch (error: any) {\n\t\t\treject(new InsightError(\"Failed to save dataset to disk: \" + error.message));\n\t\t}\n\t}\n\n\t// Takes the JSON course files and parses them into desired InsightResult[]\n\tprivate processCourseFiles(jsonCourseFiles: string[], reject: (reason?: any) => void): Promise<InsightResult[]> {\n\t\tconst sectionsArray: InsightResult[] = [];\n\t\tconst promises = jsonCourseFiles.map((jsonCourseFile) => {\n\t\t\treturn new Promise<void>((resolve) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst courseFile = JSON.parse(jsonCourseFile);\n\t\t\t\t\tif (courseFile.result && Array.isArray(courseFile.result)) {\n\t\t\t\t\t\tfor (const section of courseFile.result) {\n\t\t\t\t\t\t\tlet sectionParser = new Section();\n\t\t\t\t\t\t\tif (sectionParser.validSection(section)) {\n\t\t\t\t\t\t\t\tconst parsedSection = sectionParser.parse(section);\n\t\t\t\t\t\t\t\tif (parsedSection) {\n\t\t\t\t\t\t\t\t\tsectionsArray.push(parsedSection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new InsightError(\"JSON file does not include a 'result' key\"));\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(new InsightError(\"JSON file could not be parsed\"));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => sectionsArray)\n\t\t\t.catch((error) => {\n\t\t\t\treject(error);\n\t\t\t\treturn [];\n\t\t\t});\n\t}\n\n\t// Unzips the content and tries to convert all JSON files in the courses folder into a parsable text\n\tprivate extractCourseFiles(content: string, reject: (reason?: any) => void): Promise<string[]> {\n\t\tlet zip = new JSZip();\n\t\tconst courseFiles: Array<Promise<string>> = [];\n\t\treturn zip.loadAsync(content, {base64: true}).then((contents) => {\n\t\t\tconst coursesFolder = contents.folder(\"courses\");\n\t\t\tif (\"courses/\" in contents.files && coursesFolder && coursesFolder.files) {\n\t\t\t\tObject.keys(coursesFolder.files).forEach((filename) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (filename !== \"courses/\") {\n\t\t\t\t\t\t\tlet courseFile = coursesFolder.files[filename];\n\t\t\t\t\t\t\tcourseFiles.push(courseFile.async(\"text\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(new InsightError(\"Trying to add dataset with non-JSON file\"));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(new InsightError(\"Trying to add dataset with no courses folder\"));\n\t\t\t}\n\t\t\treturn Promise.all(courseFiles);\n\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\treject(new InsightError(\"Trying to add dataset with content that cannot be unzipped\"));\n\t\t\t\treturn [];\n\t\t\t});\n\t}\n\n\tpublic removeDataset(id: string): Promise<string> {\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tif (id === \"\" || id.includes(\"_\")) {\n\t\t\t\treject(new InsightError(\"Trying to remove dataset with an invalid ID\"));\n\t\t\t}\n\n\t\t\tif (!this.currentDatasets.includes(id)) {\n\t\t\t\treject(new NotFoundError(\"Trying to remove dataset that has not been added\"));\n\t\t\t}\n\n\t\t\tconst filePath = path.join(DATA_FOLDER_PATH, id + \".json\");\n\t\t\tfs.remove(filePath).then(() => {\n\t\t\t\tthis.currentDatasets = this.currentDatasets.filter((datasetID) => datasetID !== id);\n\t\t\t\tthis.datasetsMap.delete(id);\n\t\t\t\tresolve(id);\n\t\t\t}).catch(() => {\n\t\t\t\treject(new NotFoundError(\"Trying to remove dataset with unknown file path\"));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic performQuery(query: unknown): Promise<InsightResult[]> {\n\t\treturn Promise.reject(\"Not implemented.\");\n\t\t// return Promise.resolve([]);\n\t}\n\n\tpublic listDatasets(): Promise<InsightDataset[]> {\n\t\treturn new Promise<InsightDataset[]>((resolve) => {\n\t\t\tlet datasetsList: InsightDataset[] = [];\n\t\t\tfor(const key of this.datasetsMap.keys()) {\n\t\t\t\tconst dataset = this.datasetsMap.get(key);\n\t\t\t\tif (dataset) {\n\t\t\t\t\tconst currInsightDataset: InsightDataset = {\n\t\t\t\t\t\tid: key,\n\t\t\t\t\t\tkind: InsightDatasetKind.Sections,\n\t\t\t\t\t\tnumRows: dataset.length\n\t\t\t\t\t};\n\t\t\t\t\tdatasetsList.push(currInsightDataset);\n\t\t\t\t};\n\t\t\t};\n\t\t\tresolve(datasetsList);\n\t\t});\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"56e3cefb5c47e9b3e4003b96539acd41f621080e","contentHash":"afe73646664a37739d28a9e901281b332dfcd04698399b096fbdbd3a5be9f563"},"/Users/michellenguyen/project_team153/src/controller/Section.ts":{"path":"/Users/michellenguyen/project_team153/src/controller/Section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":5,"column":27},"end":{"line":16,"column":5}},"3":{"start":{"line":20,"column":8},"end":{"line":29,"column":9}},"4":{"start":{"line":21,"column":12},"end":{"line":27,"column":13}},"5":{"start":{"line":22,"column":37},"end":{"line":22,"column":45}},"6":{"start":{"line":23,"column":16},"end":{"line":26,"column":17}},"7":{"start":{"line":25,"column":20},"end":{"line":25,"column":33}},"8":{"start":{"line":28,"column":12},"end":{"line":28,"column":24}},"9":{"start":{"line":30,"column":8},"end":{"line":30,"column":21}},"10":{"start":{"line":33,"column":25},"end":{"line":33,"column":43}},"11":{"start":{"line":34,"column":27},"end":{"line":34,"column":91}},"12":{"start":{"line":35,"column":30},"end":{"line":46,"column":9}},"13":{"start":{"line":47,"column":8},"end":{"line":47,"column":29}},"14":{"start":{"line":50,"column":0},"end":{"line":50,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":18},"end":{"line":18,"column":5}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":26},"end":{"line":31,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":19},"end":{"line":48,"column":5}},"line":32}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":29,"column":9}},{"start":{"line":20,"column":8},"end":{"line":29,"column":9}}],"line":20},"1":{"loc":{"start":{"line":23,"column":16},"end":{"line":26,"column":17}},"type":"if","locations":[{"start":{"line":23,"column":16},"end":{"line":26,"column":17}},{"start":{"line":23,"column":16},"end":{"line":26,"column":17}}],"line":23},"2":{"loc":{"start":{"line":23,"column":20},"end":{"line":24,"column":107}},"type":"binary-expr","locations":[{"start":{"line":23,"column":20},"end":{"line":23,"column":42}},{"start":{"line":24,"column":20},"end":{"line":24,"column":107}}],"line":23},"3":{"loc":{"start":{"line":34,"column":27},"end":{"line":34,"column":91}},"type":"cond-expr","locations":[{"start":{"line":34,"column":56},"end":{"line":34,"column":68}},{"start":{"line":34,"column":71},"end":{"line":34,"column":91}}],"line":34}},"s":{"0":1,"1":1,"2":1,"3":1292369,"4":1292368,"5":12923648,"6":12923648,"7":4,"8":1292364,"9":1,"10":1292365,"11":1292365,"12":1292365,"13":1292365,"14":1},"f":{"0":1292364,"1":1292369,"2":1292365},"b":{"0":[1292368,1],"1":[4,12923644],"2":[12923648,4],"3":[1,1292364]},"inputSourceMap":{"version":3,"file":"/Users/michellenguyen/project_team153/src/controller/Section.ts","sources":["/Users/michellenguyen/project_team153/src/controller/Section.ts"],"names":[],"mappings":";;;AAEA,MAAa,OAAO;IAGX,MAAM,CAAU,aAAa,GAAG;QACvC,EAAE,EAAE,MAAM;QACV,MAAM,EAAE,MAAM;QACd,KAAK,EAAE,MAAM;QACb,SAAS,EAAE,MAAM;QACjB,OAAO,EAAE,MAAM;QACf,IAAI,EAAE,MAAM;QACZ,GAAG,EAAE,MAAM;QACX,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,MAAM;KACb,CAAC;IAEF;IAEA,CAAC;IASM,YAAY,CAAC,OAAY;QAC/B,IAAI,OAAO,EAAE;YACZ,KAAI,MAAM,QAAQ,IAAI,OAAO,CAAC,aAAa,EAAE;gBAC5C,MAAM,YAAY,GAAG,QAA8C,CAAC;gBACpE,IAAI,CAAC,CAAC,QAAQ,IAAI,OAAO,CAAC;oBACzB,OAAO,OAAO,CAAC,YAAY,CAAC,KAAK,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;oBACzF,OAAO,KAAK,CAAC;iBACb;aACD;YACD,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAUM,KAAK,CAAC,OAAY;QACxB,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpF,MAAM,aAAa,GAAkB;YACpC,IAAI,EAAE,QAAQ;YACd,EAAE,EAAE,OAAO,CAAC,MAAM;YAClB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,UAAU,EAAE,OAAO,CAAC,SAAS;YAC7B,IAAI,EAAE,OAAO,CAAC,OAAO;YACrB,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,KAAK,EAAE,OAAO,CAAC,KAAK;SACpB,CAAC;QACF,OAAO,aAAa,CAAC;IACtB,CAAC;;AAjEF,0BAkEC","sourcesContent":["import {InsightResult} from \"./IInsightFacade\";\n\nexport class Section {\n\n\t// Define the type for the provided section object\n\tprivate static readonly SectionObject = {\n\t\tid: Number,\n\t\tCourse: String,\n\t\tTitle: String,\n\t\tProfessor: String,\n\t\tSubject: String,\n\t\tYear: String,\n\t\tAvg: Number,\n\t\tPass: Number,\n\t\tFail: Number,\n\t\tAudit: Number\n\t};\n\n\tconstructor() {\n\t\t// This is a Section class\n\t}\n\n\t/**\n\t * If the provided section is valid return true\n\t * a section is valid if includes the same EBNF fields and values in SectionObject\n\t * Otherwise return false\n\t *\n\t * @param section The text content of a section within a course file\n\t */\n\tpublic validSection(section: any): boolean {\n\t\tif (section) {\n\t\t\tfor(const property in Section.SectionObject) {\n\t\t\t\tconst propertyName = property as keyof typeof Section.SectionObject;\n\t\t\t\tif (!(property in section) &&\n\t\t\t\t\ttypeof section[propertyName] !== Section.SectionObject[propertyName].name.toLowerCase()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Parse through the valid section and return a subset of the section as an InsightResult\n\t * the returned InsightResult should include the EBNF fields:\n\t * uuid, id, title, instructor, dept, year, avg, pass, fail, audit\n\t * Return null if ??\n\t *\n\t * @param section The text content of a section within a course file, required to be a validSection\n\t */\n\tpublic parse(section: any): InsightResult {\n\t\tconst stringID = String(section.id);\n\t\tconst numberYear = section.Year === \"overall\" ? Number(1900) : Number(section.Year);\n\t\tconst sectionResult: InsightResult = {\n\t\t\tuuid: stringID,\n\t\t\tid: section.Course,\n\t\t\ttitle: section.Title,\n\t\t\tinstructor: section.Professor,\n\t\t\tdept: section.Subject,\n\t\t\tyear: numberYear,\n\t\t\tavg: section.Avg,\n\t\t\tpass: section.Pass,\n\t\t\tfail: section.Fail,\n\t\t\taudit: section.Audit\n\t\t};\n\t\treturn sectionResult;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dde3f1feb522537a8eae4caa84608ff3c2570ed1","contentHash":"8636369dfdacebb474a9791434f9cb2c9ae3b45f0f0bae160b4a21e5c7ae29e5"}}